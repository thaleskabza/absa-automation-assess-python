name: Python UI Automation Tests

on:
  schedule:
    - cron: '30 6 * * *'
  push:
    branches: [ main, master, dev, feature ]
  pull_request:
    branches: [ main, master, dev, feature ]

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # 1) Define a 5Ã—4 matrix = 20 jobs
    strategy:
      matrix:
        browser: [chrome, firefox, edge, opera, safari]
        version: [latest, '106', '105', '104']

    env:
      ALLURE_RESULTS: allure-results
      ALLURE_REPORT: allure-report
      BROWSER_NAME: ${{ matrix.browser }}
      BROWSER_VERSION: ${{ matrix.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: pip

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt pytest-html pytest-xdist

      - name: Install Allure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre
          npm install -g allure-commandline --save-dev

      - name: Prepare results directory
        run: |
          mkdir -p $ALLURE_RESULTS && chmod 0777 $ALLURE_RESULTS

      - name: Create Selenoid host dirs
        run: |
          mkdir -p ./selenoid/video ./selenoid/logs

      - name: Start Selenoid & MySQL
        run: docker compose up -d --build
        timeout-minutes: 5

      - name: Wait for Selenoid to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:4444/status | grep '"total"'; then
              echo "Selenoid ready"; break
            fi
            sleep 3
          done

      - name: Run tests (Allure + HTML)
        run: |
          pytest -v --maxfail=1 --disable-warnings \
            --alluredir=$ALLURE_RESULTS \
            --html=report.html --self-contained-html \
            -n auto
        continue-on-error: true

      - name: Generate Allure report
        if: always()
        run: |
          allure generate $ALLURE_RESULTS --clean -o $ALLURE_REPORT

      - name: Upload Allure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ matrix.browser }}-${{ matrix.version }}
          path: ${{ env.ALLURE_REPORT }}
          retention-days: 7

      - name: Upload pytest HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-html-${{ matrix.browser }}-${{ matrix.version }}
          path: report.html
          retention-days: 7

      - name: Tear down
        if: always()
        run: docker compose down -v
